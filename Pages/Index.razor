@page "/"

@using BlazingPizza.Services

@inject HttpClient theHttpClient
@inject NavigationManager theNavigationManager
@inject OrderState OrderState

<div class="main">
	<p>Microsoft Learning module in this exercise:</p>
	<p>
		<div><a target="_blank" href="https://docs.microsoft.com/en-us/learn/modules/interact-with-data-blazor-web-apps/"><b>Interact with data in Blazor web apps</b></a></div>
		<ul>
			<li><a target="_blank" href="https://docs.microsoft.com/en-us/learn/modules/interact-with-data-blazor-web-apps/3-exercise-create-user-interfaces-with-blazor-components/">Exercise - Create an UI with Blazor components</a></li>
			<li><a target="_blank" href="https://learn.microsoft.com/en-us/training/modules/interact-with-data-blazor-web-apps/7-exercise-share-data-in-blazor-applications/">Exercise - Share data in Blazor applications</a></li>
			<li><a target="_blank" href="https://learn.microsoft.com/en-us/training/modules/interact-with-data-blazor-web-apps/9-exercise-bind-controls-data-blazor-applications">Exercise - Bind controls to data in Blazor applications</a></li>
		</ul>
	</p>
	<p>
		<div><a target="_blank" href="https://learn.microsoft.com/en-us/training/modules/use-pages-routing-layouts-control-blazor-navigation/"><b>Use pages, routing, and layouts to improve Blazor navigation</b></a></div>
		<ul>
			<li><a target="_blank" href="https://learn.microsoft.com/en-us/training/modules/use-pages-routing-layouts-control-blazor-navigation/3-exercise-change-navigation-blazor-using-page-directive">Exercise - Change navigation in your Blazor app by using the @@page directive</a></li>
			<li><a target="_blank" href="https://learn.microsoft.com/en-us/training/modules/use-pages-routing-layouts-control-blazor-navigation/7-exercise-add-blazor-layouts-reduce-duplicate-code">Exercise - Add a Blazor layout to reduce duplication in your code</a></li>
		</ul>
	</p>
	<ul class="pizza-cards">
		@if (specials != null)
		{
			@foreach (var special in specials)
			{
				<li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
					<div class="pizza-info">
						<span class="title">@special.Name</span>
						@special.Description
						<span class="price">@special.GetFormattedBasePrice()</span>
					</div>
				</li>
			}
		}
	</ul>

</div>

@if (OrderState.ShowingConfigureDialog)
{
	<ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
												OnCancel="OrderState.CancelConfigurePizzaDialog"
												OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}


<div class="sidebar">
	@if (order.Pizzas.Any())
	{
		<div class="order-contents">
			<h2>Your order</h2>

			@foreach (var configuredPizza in order.Pizzas)
			{
				<div class="cart-item">
					<div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
					<div class="item-price">
						@configuredPizza.GetFormattedTotalPrice()
					</div>
					<a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
				</div>
			}
		</div>
	}
	else
	{
		<div class="empty-cart">Choose a pizza<br>to get started</div>
	}

	<div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
		Total:
		<span class="total-price">@order.GetFormattedTotalPrice()</span>
		<a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
			Order >
		</a>
	</div>
</div>



@code {

	List<PizzaSpecial> specials = new();
	Order order => OrderState.Order;
	//protected override void OnInitialized()
	//{
	//	specials.AddRange(new List<PizzaSpecial>
	//		{
	//			new PizzaSpecial { Name = "The Baconatorizor", BasePrice =  11.99M, Description = "It has EVERY kind of bacon", ImageUrl="img/pizzas/bacon.jpg"},
	//			new PizzaSpecial { Name = "Buffalo chicken", BasePrice =  12.75M, Description = "Spicy chicken, hot sauce, and blue cheese, guaranteed to warm you up", ImageUrl="img/pizzas/meaty.jpg"},
	//			new PizzaSpecial { Name = "Veggie Delight", BasePrice =  11.5M, Description = "It's like salad, but on a pizza", ImageUrl="img/pizzas/salad.jpg"},
	//			new PizzaSpecial { Name = "Margherita", BasePrice =  9.99M, Description = "Traditional Italian pizza with tomatoes and basil", ImageUrl="img/pizzas/margherita.jpg"},
	//			new PizzaSpecial { Name = "Basic Cheese Pizza", BasePrice =  11.99M, Description = "It's cheesy and delicious. Why wouldn't you want one?", ImageUrl="img/pizzas/cheese.jpg"},
	//			new PizzaSpecial { Name = "Classic pepperoni", BasePrice =  10.5M, Description = "It's the pizza you grew up with, but Blazing hot!", ImageUrl="img/pizzas/pepperoni.jpg" }
	//		});
	//}
	protected override async Task OnInitializedAsync()
	{
		specials = await theHttpClient.GetFromJsonAsync<List<PizzaSpecial>>(theNavigationManager.BaseUri + "specials");
	}


}

