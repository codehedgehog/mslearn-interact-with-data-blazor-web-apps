@page "/admin/createpizza"



<div class="main">
	<h1>Add a new pizza</h1>
	<p>Microsoft Learning module in this exercise:</p>
	<p>
		<div><b><a target="_blank" href="https://learn.microsoft.com/en-us/training/modules/blazor-improve-how-forms-work/">Improve how forms and validation work in Blazor web apps</a></b></div>
		<ul>
			<li><a target="_blank" href="https://learn.microsoft.com/en-us/training/modules/blazor-improve-how-forms-work/6-validate-user-input-implicitly">Validate user input implicitly without writing validation code</a></li>
		</ul>
	</p>

	<EditForm Model="@pizza" OnValidSubmit=@ProcessInputData OnInvalidSubmit=@ShowFeedback>
		@* OnSubmit=@HandleSubmission *@
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-field">
			<label for=@pizza.Name>Name:</label>
			<InputText id="name" @bind-Value="pizza.Name" />
			<ValidationMessage For="@(() => pizza.Name)" />
		</div>

		<div class="form-field">
			<label for=@pizza.Description>Description:</label>
			<InputText id="description" @bind-Value="pizza.Description" />
		</div>

		<div class="form-field">
			<label for=@pizza.ChefEmail>Chef's E-mail:</label>
			<InputText id="chefemail" @bind-Value="pizza.ChefEmail" />
			<ValidationMessage For="@(() => pizza.ChefEmail)" />
		</div>

		<div class="form-field">
			<label for=@pizza.Price>Price:</label>
			<InputNumber id="price" @bind-Value="pizza.Price" />
			<ValidationMessage For="@(() => pizza.Price)" />
		</div>
	</EditForm>
</div>


@code {
	private Data.Pizza pizza = new();

	void HandleSubmission(EditContext context)
	{
		bool dataIsValid = context.Validate();
		if (dataIsValid)
		{
			// Store valid data here
		}
	}

	void ProcessInputData(EditContext context)
	{
		// Store valid data here
	}

	void ShowFeedback(EditContext context)
	{
		// Take action here to help the user correct the issues
	}
}
